server:
  port: 3000  # 3000 ? ?? ??

#spring:
#  datasource:
#    # DB URL
#    url: jdbc:mysql://footprint.cyk6hh5fzxrl.us-east-2.rds.amazonaws.com/footprintdb
#
#    # DB Username
#    username: admin # ?? ?? ???? ????? ???? admin ???
#
#    # DB Password
#    password: umcfootprint # ????? ??????!
#
#    # DB Driver
#    driver-class-name: com.mysql.cj.jdbc.Driver

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/devfootprint
    username: root
    password: seung0507*
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      data-source-properties:
        rewriteBatchedStatements: true
  # jpa 설정
  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: ${chunkSize:100}
        jdbc.batch_size: 20
        order_inserts: true
        order_updates: true
        format_sql: true
    # Security OAuth
    security:
      oauth2.client:
        registration:
          google:
            clientId: '{264892328424-fvf3tigohhnmb1svj0o8ahairqv24ddg.apps.googleusercontent.com}'
            clientSecret: '{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}'
            scope:
              - email
              - profile
          kakao:
            clientId: '{ada69aa7b4d7815df3e8e4047f0e5d0f}'
            clientSecret: '{paIQoAsRG4VzRMxwOr3s6PpuJBMbXlvw}'
            clientAuthenticationMethod: post
            authorizationGrantType: authorization_code
            redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope:
              - profile_nickname
              - account_email
#              이미 있는데 받아와야 한가?
#              - gender
#              - birthday
            clientName: Kakao
        # Provider 설정
        provider:
          naver:
            authorizationUri: https://nid.naver.com/oauth2.0/authorize
            tokenUri: https://nid.naver.com/oauth2.0/token
            userInfoUri: https://openapi.naver.com/v1/nid/me
            userNameAttribute: response
          kakao:
            authorizationUri: https://kauth.kakao.com/oauth/authorize
            tokenUri: https://kauth.kakao.com/oauth/token
            userInfoUri: https://kapi.kakao.com/v2/user/me
            userNameAttribute: id

  # cors 설정
  cors:
    allowed-origins: 'http://localhost:3000'
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: '*'
    max-age: 3600

  # jwt secret key 설정
  jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOds'

  # 토큰 관련 secret Key 및 RedirectUri 설정
  app:
    auth:
      tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
      tokenExpiry: 1800000
      refreshTokenExpiry: 604800000
    oauth2:
      authorizedRedirectUris:
        - http://localhost:3000/oauth/redirect